
Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
Chef is on an adventure to find the tastiest exotic spices. Everyone knows that the best spices are guarded by several ancient dragons that dwell within mountains.
The mountain range can be modeled by a polyline in the 2D xzxz plane that passes through NN points p1=(1,h1),p2=(2,h2),…,pN=(N,hN)p1=(1,h1),p2=(2,h2),…,pN=(N,hN), in this order, where hihi is a positive integer for each valid ii. This polyline divides the set of points {(x,z):1≤x≤N}{(x,z):1≤x≤N} into two regions. The "solid" part of the mountain range is the "bottom" region, i.e. the region that contains the xx-axis (the x-axis is the line z=0z=0).
A dragon's den is located at each of the NN points. For each valid ii, the den at the point pipi initially contains a pile of spices with tastiness aiai. With a technique he learned from dragons, Chef can glide from den to den, tasting all of the spices along the way. The tastiness of an entire journey is the summed up tastiness of spices over all dens visited during the journey. However, there are some restrictions:

Chef can only glide from a higher den to a strictly lower den, i.e. if he glides from a den at pipi to a den at pjpj, then hi>hjhi>hj must hold.
Chef can only glide in one direction and never look back, i.e. if he starts travelling in the direction of decreasing xx, he must keep travelling in that direction until the end of the journey, and if he starts travelling in the direction of increasing xx, he must keep travelling in that direction until the end of the journey too.
Chef cannot travel through solid mountain, i.e. he can only glide from a den at pipi to a den at pjpj if the line segment connecting the points pipi and pjpj does not intersect the "solid" part of the mountain range. However, it may touch the border of the mountain range, i.e. the polyline itself.

Note that gliding is the only way for Chef to travel between dens.  It is valid for a journey to begin and end at the same den, in which case Chef tastes the spices at the den and nothing else.
See the explanation of the sample test case for a concrete example.
With that in mind, Chef needs you to process QQ queries. There are two types of queries:

1 b k: Chef changes his mind and decides that the tastiness of the spices in the den at the point pbpb should be changed to kk instead.
2 b c: Chef wants to start a journey at the den located at pbpb and end it at the den located at pcpc. Find the maximum possible tastiness of such a journey or determine that no such journey exists. 

Input

The first line of the input contains two space-separated integers NN and QQ.
The second line contains NN space-separated integers h1,h2,…,hNh1,h2,…,hN.
The third line contains NN space-separated integers a1,a2,…,aNa1,a2,…,aN.
Then, QQ lines follow. Each of these lines contains three space-separated integers describing a query in the above format.

Output
For each query of the second type, print a single line containing one integer ― the maximum tastiness of a journey or −1−1 if no valid journey exists.
Constraints

1≤N,Q≤2⋅1051≤N,Q≤2⋅105
1≤hi≤1091≤hi≤109 for each valid ii
1≤ai≤1091≤ai≤109 for each valid ii
1≤b,c≤N1≤b,c≤N
1≤k≤1091≤k≤109

Subtasks
Subtask 1 (10 points): N,Q≤1,000N,Q≤1,000
Subtask 2 (35 points): there are no queries of the first type
Subtask 3 (55 points): original constraints

                        Sample Input 1
                        

5 4
3 1 4 1 5
1 2 4 8 16
2 5 2
1 3 5
2 3 4
2 1 4

                        Sample Output 1
                        

22
13
-1
Explanation
Here is an illustration of the mountain range described in the first sample test case.
Query 1: Starting at p5p5 (height 55), Chef can glide to p3p3 (height 4) and then to p2p2 (height 11). The total tastiness of this journey is a5+a3+a2=16+4+2=22a5+a3+a2=16+4+2=22.

 

Query 2: The value of a3a3 is set to 55.
Query 3: Chef glides from p3p3 to p4p4. The tastiness is a3+a4=5+8=13a3+a4=5+8=13.
Query 4: It is impossible to get from p1p1 to p4p4. Even if h1>h4h1>h4, to reach p4p4, Chef would need to fly either upwards or through the mountain, both of which are impossible.


Author:
3★shisuko
Editorial:
https://discuss.codechef.com/problems/DRGNDEN
Tags:

               
                 Stacks, Trees, Segment Trees, Fenwick Trees, HLD, DFS Order
                 
                     
                     Data Structures, Graphs, Advanced Data Structures, Advanced Tree Structures, Advanced Algorithms, Advanced Graph Algos, Algorithms, Graph Algos, Traversals, DFS
                 
               
             
             

                        Difficulty Rating:
                    

2355
Date Added:
23-03-2020
Time Limit:
1 secs
Source Limit:
50000 Bytes
Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM

Submit