
In a market of mangoes, there are NN sellers numbered from 11 to NN. The ii-th seller initially charges a price of AiAi coins for each of their mangoes. However, the sellers are very competitive, and they will change prices based on other sellers nearby.
You have a simple graph (unweighted, undirected graph containing no self-loops or multiple edges) GG with NN vertices and MM edges. There is an edge between two sellers if and only if they are neighbours. When you buy a mango from a seller numbered XX, the following occurs:

Seller XX keeps his price the same.
Every seller YY who is a neighbour of XX increases their price by 11, that is, AY=AY+1AY=AY+1 for every YY who is a neighbour of XX.
Every other seller ZZ who is not a neighbour of XX decreases their price by 11; that is, AZ=AZ−1AZ=AZ−1 for every ZZ who is not a neighbour of XX.

Prices can become zero or negative during this process.
Now you should process QQ queries of the following three types:

++ uu vv — Add an edge between nodes uu and vv in the graph. It's guaranteed there is no edge between uu and vv currently.
-- uu vv — Remove an edge between nodes uu and vv in the graph. It's guaranteed there is an edge between uu and vv currently.
?? — Find the minimum amount of money you need to pay so that you can buy exactly one mango from every seller. After queries of this type, the prices of all sellers are reset to their initial value.

Input Format

The first line contains two integers NN and MM - the number of sellers and the number of edges in the graph.
The second line contains NN space-separated integers A1,A2,…,ANA1,A2,…,AN denoting the price array AA.
The next MM lines each contain two integers uu and vv (1≤u,v≤N1≤u,v≤N, u≠vu≠v), representing an edge of GG. 
The next line contains the integer QQ — the number of queries. 
The next QQ lines contain the queries. Each query is in the format given in the problem statement.
There is at least one query of type ??.

Output Format
For each query of type ??, output one integer — the minimum amount of money you need to pay so that you can buy exactly one mango from each seller.
Constraints

1≤N,Q≤1051≤N,Q≤105
1≤M≤min((N2),105)1≤M≤min((N2),105)
1≤Ai≤1091≤Ai≤109
It's guaranteed that GG is a simple graph, that is, it is an unweighted, undirected graph containing no self-loops or multiple edges.
                        Sample Input 1
                        

4 3
8 9 6 10
2 1
1 3
3 4
6
?
+ 2 3
+ 4 2
- 3 1
+ 1 4
?

                        Sample Output 1
                        

33
37
Explanation
In the sample test, the first query of type ?? is pictured below. The ii-th node (from left to right) contains the price of the ii-th seller. If we buy mangoes from the sellers 11, 44, 33, 22, in that order, then we can pay 88, 99, 88, and 88 coins for the mangoes, respectively, paying a total 3333 coins. It can be proven that this is indeed the minimum amount possible.
It can be proven that for the second query of type ??, the minimum amount we can pay is 3737 coins. Note that the prices of the mangoes reset after each query of type ??.

Author:
3★flamestorm153
Editorial:
https://discuss.codechef.com/problems/MANGOMKT
Tags:

               
                 cook138, easy, flamestorm153, graphs, observation
                 
               
             
             

                        Difficulty Rating:
                    

2393
Date Added:
20-02-2022
Time Limit:
2 secs
Source Limit:
50000 Bytes
Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM

Submit