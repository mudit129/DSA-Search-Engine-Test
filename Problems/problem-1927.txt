
Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
Chef is preparing tests for the problem "Move the Coins"!
He needs to create a tree GG with NN nodes (numbered 11 through NN), which is rooted at node 11, and a list of QQ distinct reparentings. A reparenting is a pair of nodes (u,v)(u,v) (u≠1u≠1) of GG and the result of applying it to GG is another graph, formed as follows:

Take a copy of the original tree GG.
In this copy, remove the edge connecting the vertex uu to its parent.
Then, add a new edge between the nodes uu and vv.

As an example, consider the following tree GG:

We wish to apply the reparenting r=(6,3)r=(6,3) to it. The resulting graph would be

A reparenting rr is valid if the resulting graph is still a tree (that is, a connected graph without cycles). For the time being, Chef wants to generate only valid reparentings.
Chef has already decided on the tree GG and now he just needs to pick QQ valid reparentings. He makes an initial list LL of all valid reparentings for this tree and sorts them in a special order.
Let r=(u,v)r=(u,v) and r′=(u′,v′)r′=(u′,v′) be valid reparentings. Their order is decided as follows:

if u<u′u<u′, then r<r′r<r′
if u>u′u>u′, then r>r′r>r′
if u=u′u=u′, find the distances of nodes vv and v′v′ from the root and denote them by hh and h′h′ respectively
if u=u′u=u′ and h<h′h<h′, then r<r′r<r′
if u=u′u=u′ and h>h′h>h′, then r>r′r>r′
if u=u′u=u′, h=h′h=h′ and v<v′v<v′, then r<r′r<r′
if u=u′u=u′, h=h′h=h′ and v>v′v>v′, then r>r′r>r′

Chef chooses QQ integers c1,c2,…,cQc1,c2,…,cQ, removes the c1c1-th element of LL, then removes the c2c2-th element of the resulting (smaller) list LL, and so on, until he removes the cQcQ-th element. The sequence c1,c2,…,cQc1,c2,…,cQ is chosen in such a way that during this process, each of them is a valid index of an element in the current list LL. This way, he removes QQ distinct valid reparentings and uses them in one test.
Because Chef does not believe in making life easy for himself, the sequence c1,c2,…,cQc1,c2,…,cQ is encrypted and each of its elements cannot be decrypted until all previous reparentings are found. More formally, consider a decryption key dd; initially, d=0d=0. You are given an encrypted sequence e1,e2,…,eQe1,e2,…,eQ. For each integer ii from 11 to QQ, Chef decrypts ci=ei⊕dci=ei⊕d (⊕⊕ denotes the bitwise XOR operator), finds the cici-th reparenting in the current list LL, denoted by (ui,vi)(ui,vi), removes it from LL and updates the decryption key dd to (d+2i⋅ui+3i⋅vi)%(109+7)(d+2i⋅ui+3i⋅vi)%(109+7).
Can you help Chef find the QQ valid reparentings corresponding to his encrypted choices? Calculating the final value of dd will suffice to show that you can do it!
Input

The first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows.
The first line of each test case contains a single integer NN.
Each of the next N−1N−1 lines contains two space-separated integers aa and bb denoting that nodes aa and bb are connected by an edge.
The next line contains a single integer QQ.
QQ lines follow. For each valid ii, the ii-th of these lines contains a single integer eiei.

Output
For each test case, print a single line containing one integer ― the final value of dd after processing all QQ reparentings.
Constraints

1≤T≤1,0001≤T≤1,000
1≤N,Q≤200,0001≤N,Q≤200,000
1≤a,b≤N1≤a,b≤N
0≤ei≤2360≤ei≤236 for each valid ii
1≤ci≤R+1−i1≤ci≤R+1−i for each valid ii, where RR is the number of valid reparentings
the sum of NN over all test cases does not exceed 200,000200,000
the sum of QQ over all test cases does not exceed 200,000200,000

Subtasks
Subtask #1 (5 points):

T≤10T≤10
N,Q≤100N,Q≤100

Subtask #2 (10 points):

T≤100T≤100
N,Q≤1,000N,Q≤1,000

Subtask #3 (85 points): original constraints

                        Sample Input 1
                        

2
5
1 3
1 2
2 4
2 5
3
5
23
72
7
1 7
2 1
6 1
5 4
3 5
1 5
5
9
6
35
313
602

                        Sample Output 1
                        

126
910
Explanation
Example case 1: The tree GG is

There are 2525 reparentings (u,v)(u,v) ? too many to draw all of them! However, here is a representative sampling. Valid reparentings are marked with a '?'; invalid ones with a '?':

We can also form a table of validity of all reparentings (u,v)(u,v):
         v
     1 2 3 4 5 
     ?????????
  1 ?? ? ? ? ? 
  2 ?? ? ? ? ? 
u 3 ?? ? ? ? ? 
  4 ?? ? ? ? ? 
  5 ?? ? ? ? ? 

Our initial list LL, then, is formed by listing all pairs (u,v)(u,v) with a '?' and sorting in the order described above. We get the following list:
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  3  4  2
 6.  3  5  2
 7.  4  1  0
 8.  4  2  1
 9.  4  3  1
10.  4  5  2
11.  5  1  0
12.  5  2  1
13.  5  3  1
14.  5  4  2

For i=1,2,3i=1,2,3, we need to decrypt eiei to get cici, then find the corresponding reparenting (ui,vi)(ui,vi) in the current list LL, remove it from LL and use it to update our decryption key dd. The initial value of dd is 00. The first encrypted choice is e1=5e1=5; we decrypt it to get c1=d⊕e1=0⊕5=5c1=d⊕e1=0⊕5=5, so the reparenting corresponding to the first choice is the 55-th entry in the current list LL, which is (u1,v1)=(3,4)(u1,v1)=(3,4). We update dd to (0+21⋅u1+31⋅v1)%(109+7)=18(0+21⋅u1+31⋅v1)%(109+7)=18 and remove the 55-th element from LL, which becomes
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  3  5  2
 6.  4  1  0
 7.  4  2  1
 8.  4  3  1
 9.  4  5  2
10.  5  1  0
11.  5  2  1
12.  5  3  1
13.  5  4  2

On to the second choice! e2=23e2=23, so c2=18⊕23=5c2=18⊕23=5 and the reparenting (u2,v2)(u2,v2) is (3,5)(3,5). We update dd again to (18+22⋅u2+32⋅v2)%(109+7)=75(18+22⋅u2+32⋅v2)%(109+7)=75 and remove (3,5)(3,5) from our list LL, which becomes
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  4  1  0
 6.  4  2  1
 7.  4  3  1
 8.  4  5  2
 9.  5  1  0
10.  5  2  1
11.  5  3  1
12.  5  4  2

On to the third and final choice!  With e3=72e3=72, we decrypt c3=75⊕72=3c3=75⊕72=3, so the reparenting (u3,v3)=(3,1)(u3,v3)=(3,1). We use this to update dd for the final time to (75+23⋅u3+33⋅v3)%(109+7)=126(75+23⋅u3+33⋅v3)%(109+7)=126.
We have now processed all QQ choices, and the final decryption key is d=126d=126.
Example case 2: The tree GG is

There are 4949 possible reparentings; again, we only show a representative sample of them and their validity:

The whole table of validity of reparentings is
           v
     1 2 3 4 5 6 7 
     ?????????????
  1 ?? ? ? ? ? ? ? 
  2 ?? ? ? ? ? ? ? 
  3 ?? ? ? ? ? ? ? 
u 4 ?? ? ? ? ? ? ? 
  5 ?? ? ? ? ? ? ? 
  6 ?? ? ? ? ? ? ? 
  7 ?? ? ? ? ? ? ? 

By listing the valid ones and sorting them in the described order, we get our initial list LL:
 #   u  v  h
 1.  2  1  0
 2.  2  5  1
 3.  2  6  1
 4.  2  7  1
 5.  2  3  2
 6.  2  4  2
 7.  3  1  0
 8.  3  2  1
 9.  3  5  1
10.  3  6  1
11.  3  7  1
12.  3  4  2
13.  4  1  0
14.  4  2  1
15.  4  5  1
16.  4  6  1
17.  4  7  1
18.  4  3  2
19.  5  1  0
20.  5  2  1
21.  5  6  1
22.  5  7  1
23.  6  1  0
24.  6  2  1
25.  6  5  1
26.  6  7  1
27.  6  3  2
28.  6  4  2
29.  7  1  0
30.  7  2  1
31.  7  5  1
32.  7  6  1
33.  7  3  2
34.  7  4  2

The initial value of dd is 00. The first encrypted value is e1=9e1=9 and we decrypt it to get c1=d⊕e1=0⊕9=9c1=d⊕e1=0⊕9=9. The reparenting (u1,v1)(u1,v1) is the 99-th element of LL, i.e. (u1,v1)=(3,5)(u1,v1)=(3,5). We update dd to (0+21⋅u1+31⋅v1)%(109+7)=21(0+21⋅u1+31⋅v1)%(109+7)=21 and remove (3,5)(3,5) from the list LL. (To save space, we do not show LL after each removal.)
On to the next encrypted value e2=6e2=6: we decrypt it to get c2=21⊕6=19c2=21⊕6=19, so the reparenting (u2,v2)(u2,v2) is the 1919-th element of LL now (the 2020-th element in the initial list), i.e. (5,2)(5,2). We update dd to (21+22⋅u2+32⋅v2)%(109+7)=59(21+22⋅u2+32⋅v2)%(109+7)=59 and remove (5,2)(5,2) from LL.
Next, e3=35e3=35, so c3=59⊕35=24c3=59⊕35=24, (u3,v3)=(6,7)(u3,v3)=(6,7), we update dd to (59+23⋅u3+33⋅v3)%(109+7)=296(59+23⋅u3+33⋅v3)%(109+7)=296 and remove (6,7)(6,7) from LL.
Next, e4=313e4=313, so c4=296⊕313=17c4=296⊕313=17, (u4,v4)=(4,3)(u4,v4)=(4,3), we update dd to (296+24⋅u4+34⋅v4)%(109+7)=603(296+24⋅u4+34⋅v4)%(109+7)=603 and remove (4,3)(4,3) from LL.
The last of Chef's encrypted choices is e5=602e5=602, so c5=603⊕602=1c5=603⊕602=1, (u5,v5)=(2,1)(u5,v5)=(2,1). We update dd to (603+25⋅u5+35⋅v5)%(109+7)=910(603+25⋅u5+35⋅v5)%(109+7)=910.
We have now processed all QQ of Chef's choices, and the final decryption key is d=910d=910.

Author:
6★ssjgz
Editorial:
https://discuss.codechef.com/problems/MVCN2TST
Tags:

               
                 Trees, Disjoint Set Union, Persistent Segment Trees, DFS, Binary Search, Prefix Sum
                 
                     
                     Data Structures, Graphs, Advanced Data Structures, Persistent Structures, Algorithms, Graph Algos, Traversals, Searching, Simple Algos
                 
               
             
             

                        Difficulty Rating:
                    

2622
Date Added:
30-07-2020
Time Limit:
3 secs
Source Limit:
50000 Bytes
Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM

Submit