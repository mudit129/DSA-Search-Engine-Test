
Read problems statements in Mandarin Chinese, Russian, Vietnamese and Bengali as well.
You are given a tree with NN nodes (numbered 11 through NN). 
The distance d(p,q)d(p,q) between two nodes pp and qq of the tree is the number of edges on the unique path between them.
There will be QQ events each of which can be of the following three types:

'1 u': A certain node uu becomes a special node. It is guaranteed that uu was not special before this event.
'2 u': A certain node uu becomes no longer special. It is guaranteed that uu was special before this event.
'3 K': You are given a non-negative integer KK. For a node xx, define f(x)=max{d(x,y):y is special}f(x)=max{d(x,y):y is special}. You must answer if there exists a node xx such that f(x)=Kf(x)=K. In other words, you are asked whether there exists a node xx whose distance to the farthest special node is KK. Note that xx doesn't have to be special. It is guaranteed that there is at least one special node in the tree at the time of this event.

In the beginning, there are no special nodes.
Input Format

The first line of the input contains a single integer TT - the number of test cases. The description of TT test cases follow.
The first line of each test case contains a single integer NN.
N−1N−1 lines follow. The ii-th of these lines contains two integers uiui and vivi denoting an edge of the tree.
The next line contains a single integer QQ - the number of events.
QQ lines follow. The ii-th of these lines contains two integers titi (the type of the ii-th query) and qiqi. If ti=1ti=1 or ti=2ti=2, qiqi is the vertex whose status is being changed. If ti=3ti=3, qiqi is the parameter describing a query of the third type.

Output Format

For each test case, print a single line.
In that line, print ll characters with no spaces between them, where ll is the number of queries of third type in this test case. 
For each valid ii, the ii-th character in the line should be 11 if there exists a node satisfying the conditions of the ii-th query of third type in that test case and 00 otherwise.

Constraints

1≤T≤2001≤T≤200
1≤N,Q≤2⋅1051≤N,Q≤2⋅105
1≤ui,vi≤N1≤ui,vi≤N
1≤ti≤31≤ti≤3
1≤qi≤N1≤qi≤N for each ii such that ti=1ti=1 or ti=2ti=2
0≤qi≤N−10≤qi≤N−1 for each ii such that ti=3ti=3 
The graph described on the input is a tree
In each test case, there is at least one query of type 33
The sum of NN over all test cases does not exceed 4⋅1054⋅105
The sum of QQ over all test cases does not exceed 4⋅1054⋅105
                        Sample Input 1
                        

2
5
1 2
1 3
2 4
2 5
7
1 2
3 2
3 3
1 4
3 3
2 2
3 1
8
1 2
2 3
2 4
2 5
4 6
5 7
5 8
9
1 1
1 7
1 8
3 2
3 1
3 4
2 1
3 1
3 5

                        Sample Output 1
                        

1011
10110
Explanation
Test case 1: The following picture shows the tree in the first test case:


In the first query of the third type we have K=2K=2 and the node 22 is the only special node. The special node with the maximum distance from node 33 is the node 22 and d(3,2)=2=Kd(3,2)=2=K, so the node 33 satisfies the requirement. Therefore, the answer to this query is 11.
In the second query of the third type we have K=3K=3 and the node 22 is the only special node. There do not exist any nodes at distance K=3K=3 from the node 22. Therefore, the answer to this query is 00.
In the third query of the third type we have K=3K=3 and the special nodes are 22 and 44. The special node with the maximum distance from node 33 is the node 44 and d(3,4)=3=Kd(3,4)=3=K, so the node 33 satisfies the requirement. Therefore, the answer to this query is 11.
In the fourth query of the third type we have K=1K=1 and the node 44 is the only special node. The special node with the maximum distance from node 22 is the node 44 and d(2,4)=1=Kd(2,4)=1=K, so the node 22 satisfies the requirement. Therefore, the answer to this query is 11.

Test case 2: The following picture shows the tree in the second test case:


In the first query of the third type we have K=2K=2 and the special nodes are 11, 77 and 88. The special node with the maximum distance from node 22 is the node 77 and d(2,7)=2=Kd(2,7)=2=K, so the node 22 satisfies the requirement. Therefore, the answer to this query is 11.
In the second query of the third type we have K=1K=1 and the special nodes are 11, 77 and 88. There do not exist any nodes at distance K=1K=1 from their farthest special node. Therefore, the answer to this query is 00.
In the third query of the third type we have K=4K=4 and the special nodes are 11, 77 and 88. The special node with the maximum distance from node 66 is the node 77 and d(6,7)=4=Kd(6,7)=4=K, so the node 66 satisfies the requirement. Therefore, the answer to this query is 11.
In the fourth query of the third type we have K=1K=1 and the special nodes are 77 and 88. The special node with the maximum distance from node 55 is the node 77 and d(5,7)=1=Kd(5,7)=1=K, so the node 55 satisfies the requirement. Therefore, the answer to this query is 11.
In the fifth query of the third type we have K=5K=5 and the special nodes are 77 and 88. There do not exist any nodes at distance K=5K=5 from their farthest special node. Therefore, the answer to this query is 00.


Author:
5★losmi247
Editorial:
https://discuss.codechef.com/problems/SPTREE2
Tags:

               
                 Trees, Segment Trees, Lowest Common Ancestor, DFS Order, Diameter
                 
                     
                     Data Structures, Graphs, Advanced Data Structures, Advanced Tree Structures, Algorithms, Graph Algos, Traversals, Graph Measurements, DFS
                 
               
             
             

                        Difficulty Rating:
                    

3283
Date Added:
24-07-2021
Time Limit:
2 secs
Source Limit:
50000 Bytes
Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM

Submit