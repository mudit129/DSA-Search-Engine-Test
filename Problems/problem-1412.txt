
In these tough times of the pandemic, the state of Berland has an urgent requirement 
of a hospital The state of Berland can be described as NN cities connected by N−1N−1 bidirectional
roads , there always exists a unique path between any pair of cities. Each city is treated as a node and each bidirectional road is treated as undirected edge. The given tree is rooted at node 11.
The number of infected people in any city are described by a special function given as F(x) 
      F(x) = 1 * gcd(1,x) + 2 * gcd(2,x) + …… + x * gcd(x,x)

where gcd of (i,x) is Greatest Common Divisor and xx is the value of the iith node.
Now for a hospital to be built on an iith city, we first require the total number of infected 
people, which is given as the sum of F(x) for all the values of nodes in the subtree rooted
at node ii.
The number of infected people in a city may also change as time passes which is described by
the following queries - 
You are given qq queries. There are two types of query. Type−1Type−1 and Type−2Type−2.
Type−1Type−1 query : 11 ii -> You are given a node ii. Find Sum of F(x) for all the values of nodes in the subtree rooted at node ii.
Type−2Type−2 query : 22 xx valval -> you are given two integers xx and valval , change value of node xx to valval.
Input:
The first line of the input contains one integer NN the number of vertices in the tree.
The second line of the input contains NN integers  a1a1, a2a2, a3a3, …… aNaN  , where aiai is the initial value of node ii.
Each of the next N−1N−1 lines describes an edge of the tree. Edge ii is denoted by two integers uu and vv  the labels of vertices it connects. ( 11<= uiui , vivi <=NN and ui≠viui≠vi )
Next line contains an integer qq  (number of queries).
Next qq lines contain query of Type−1Type−1 or of Type−2Type−2.
Type−1Type−1 query : 11 ii.
Type−2Type−2 query: 22 xx valval.
Output:

For every query of Type−2Type−2 , print the required sum modulo 1000000007.

Constraints :

2≤N≤1052≤N≤105
1≤q≤1061≤q≤106
1≤x≤N1≤x≤N
1≤val≤1061≤val≤106
1≤ai≤1061≤ai≤106

Subtasks:

10 points : 
2≤N≤1032≤N≤103
1≤q≤1031≤q≤103
1≤x≤N1≤x≤N
1≤val≤1031≤val≤103
1≤ai≤1031≤ai≤103
90 points :
    Original constraints.

Sample Input:
4
1 2 2 5
1 2
1 3
3 4
3
1 1
2 3 5
1 3

Sample Output:
46
70

EXPLANATION:
Query 1:  for node 1,
      Ans = F(a[1]) + F(a[2]) + F(a[3]) + F(a[4])
      Ans = F(1) + F(2) + F(2) + F(5)
          F(1) = 1 * gcd(1,1) = 1
          F(2) = 1 * gcd(1,2) + 2 * gcd(2,2) = 1 + 4 = 5
          F(5) = 1 * gcd(1,5) + 2 * gcd(2,5) + 3 * gcd(3,5) + 4 * gcd(4,5) + 5 * gcd(5,5)
               = 1 + 2 + 3 + 4 + 25 = 35
       Ans = 1 + 5 + 5 + 35 = 46.

Query 2: update value of node 3 , now a[3] = 5 
Query 3: for node 3
      Ans = F(a[3]) + F(a[4])
      Ans = F(5) + F(5)
                 F(5) = 1 * gcd(1,5) + 2 * gcd(2,5) + 3 * gcd(3,5) + 4 * gcd(4,5) + 5 * gcd(5,5)
                 F(5) = 1 + 2 + 3 + 4 + 25 = 35
      Ans = 35 + 35 = 70.


Author:
5★hellb0y_suru
Editorial:
https://discuss.codechef.com/problems/QUEFNX
Tags:

               
                 data-structure, depth-first-search, easy-medium, euler-totient-funtion, fenwick-tree, hellb0y_suru, segment-tree, str2020
                 
               
             
             

                        Difficulty Rating:
                    

N/A
Date Added:
8-10-2020
Time Limit:
2 secs
Source Limit:
50000 Bytes
Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM

Submit